using System;
using System.Text;

namespace Crofana.CmtpCompiler
{
    public class Compiler
    {
        public String CompileToProto(Module module)
        {
            return new ProtoBuilder(module).Build();
        }

        public String CompileToController(Module module, Rpc rpc)
        {
            return new ControllerBuilder(module, rpc).Build();
        }

        private class ProtoBuilder
        {
            private StringBuilder m_sb;
            public Module Module { get; set; }
            public ProtoBuilder(Module module)
            {
                m_sb = new();
                Module = module;
            }
            private void Init()
            {
                m_sb.Clear();
                m_sb.Append("syntax = \"proto3\";\n");
            }
            private void BuildModule()
            {
                m_sb.Append($"package {Module.Name};\n\n");
            }

            private void BuildUsing(Using @using)
            {
                m_sb.Append($"import \"{@using.Name}.proto\";\n");
            }

            private void BuildEValue(EValue evalue)
            {
                m_sb.Append($"    {evalue.Name} = {evalue.Value};\n");
            }

            private void BuildField(Field field, Int32 id)
            {
                String typeName = field.Type;
                String typeString = null;
                if (typeName == "int32" ||
                    typeName == "int64" ||
                    typeName == "uint32" ||
                    typeName == "uint64" ||
                    typeName == "float" ||
                    typeName == "double" ||
                    typeName == "bool" ||
                    typeName == "string" ||
                    typeName == "bytes")
                {
                    typeString = typeName;
                }
                else if (typeName == "list")
                {
                    typeString = $"repeated {field.Value}";
                }
                else if (typeName == "map")
                {
                    typeString = $"map<{field.Key}, {field.Value}>";
                }
                else
                {
                    // TODO 编译期检查
                    typeString = typeName;
                }
                m_sb.Append($"    {typeString} {field.Name} = {id};\n");
            }

            private void BuildEnum(Enum @enum)
            {
                if (@enum.EValues.Count == 0) return;
                m_sb.Append($"enum {@enum.Name} {{\n");
                @enum.EValues.ForEach(evalue => BuildEValue(evalue));
                m_sb.Append("}\n\n");
            }

            private void BuildStruct(Struct @struct)
            {
                if (@struct.Fields.Count == 0) return;
                m_sb.Append($"message {@struct.Name} {{\n");
                Int32 i = 0;
                @struct.Fields.ForEach(field => BuildField(field, ++i));
                m_sb.Append("}\n\n");
            }

            private void BuildRpc(Rpc rpc)
            {
                m_sb.Append($"message {rpc.Name} {{\n");
                Int32 i = 0;
                rpc.Fields.ForEach(field => BuildField(field, ++i));
                m_sb.Append("}\n\n");
            }

            public String Build()
            {
                Init();
                BuildModule();
                Module.Usings.ForEach(@using => BuildUsing(@using));
                m_sb.Append("\n");
                Module.Enums.ForEach(@enum => BuildEnum(@enum));
                Module.Structs.ForEach(@struct => BuildStruct(@struct));
                Module.Rpcs.ForEach(rpc => BuildRpc(rpc));
                return m_sb.ToString();
            }

        }

        private class ControllerBuilder
        {
            private StringBuilder m_sb;
            public Module Module { get; set; }
            public Rpc Rpc { get; set; }
            public ControllerBuilder(Module module, Rpc rpc)
            {
                m_sb = new();
                Module = module;
                Rpc = rpc;
            }

            public String Build()
            {
                m_sb.Clear();
                m_sb.Append("//THIS FILE IS GENERATED BY CMTP COMPILER, DO NOT EDIT IT!\n");
                m_sb.Append("\n");
                m_sb.Append("#region Generated code block\n");
                m_sb.Append($"namespace {Module.Name}\n");
                m_sb.Append("{\n");
                m_sb.Append($"    [Crofana.Network.Controller({Rpc.OpCode})]\n");
                m_sb.Append($"    [Crofana.Network.MessageType(typeof({Rpc.Name}))]\n");
                m_sb.Append($"    public partial class {Rpc.Name}Controller : Crofana.Network.IController\n");
                m_sb.Append("    {\n");
                m_sb.Append("    \n");
                m_sb.Append("        #region Fields\n");
                m_sb.Append($"        private System.Collections.Generic.Dictionary<System.Int32, System.Func<{Rpc.Name}, System.Boolean>> m_responses = new();\n");
                m_sb.Append("        private static Crofana.Network.Cmtp.CmtpOpCode? m_opcode;\n");
                m_sb.Append("        private static System.Type m_messageType;\n");
                m_sb.Append("        #endregion\n");
                m_sb.Append("        \n");
                m_sb.Append("        #region Auto properties\n");
                m_sb.Append("        public int StatusCode { get; set; }\n");
                m_sb.Append("        #endregion\n");
                m_sb.Append("        \n");
                m_sb.Append("        #region Constructors\n");
                m_sb.Append($"        public {Rpc.Name}Controller() => Crofana.Network.ControllerTools.RegisterResponse(this, typeof({Rpc.Name}), (statusCode, method) => m_responses[statusCode] = method.CreateDelegate<System.Func<{Rpc.Name}, System.Boolean>>());\n");
                m_sb.Append("        #endregion\n");
                m_sb.Append("        \n");
                m_sb.Append("        #region IController interface\n");
                m_sb.Append($"        public bool Response(Google.Protobuf.IMessage msg)\n");
                m_sb.Append("        {\n");
                m_sb.Append("            System.Console.WriteLine($\"Receive message {msg.GetType().FullName}: {msg}\");\n");
                m_sb.Append("            if (m_responses.ContainsKey(StatusCode))\n");
                m_sb.Append("            {\n");
                m_sb.Append($"                return m_responses[StatusCode].Invoke(msg as {Rpc.Name});\n");
                m_sb.Append("            }\n");
                m_sb.Append("            return true;\n");
                m_sb.Append("        }\n");
                m_sb.Append("        \n");
                m_sb.Append("        public Crofana.Network.Cmtp.CmtpOpCode OpCode\n");
                m_sb.Append("        {\n");
                m_sb.Append("            get\n");
                m_sb.Append("            {\n");
                m_sb.Append("                if (m_opcode is null)\n");
                m_sb.Append("                {\n");
                m_sb.Append("                    m_opcode = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<Crofana.Network.ControllerAttribute>(GetType()).OpCode;\n");
                m_sb.Append("                }\n");
                m_sb.Append("                return (Crofana.Network.Cmtp.CmtpOpCode)m_opcode;\n");
                m_sb.Append("            }\n");
                m_sb.Append("        }\n");
                m_sb.Append("        \n");
                m_sb.Append("        public System.Type MessageType\n");
                m_sb.Append("        {\n");
                m_sb.Append("            get\n");
                m_sb.Append("            {\n");
                m_sb.Append("                if (m_messageType is null)\n");
                m_sb.Append("                {\n");
                m_sb.Append("                    m_messageType = System.Reflection.CustomAttributeExtensions.GetCustomAttribute<Crofana.Network.MessageTypeAttribute>(GetType()).MessageType;\n");
                m_sb.Append("                }\n");
                m_sb.Append("                return m_messageType;\n");
                m_sb.Append("            }\n");
                m_sb.Append("        }\n");
                m_sb.Append("        #endregion\n");
                m_sb.Append("        \n");
                m_sb.Append("    }\n");
                m_sb.Append("}\n");
                m_sb.Append("#endregion\n\n");
                return m_sb.ToString();
            }
        }
    }
}
